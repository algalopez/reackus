plugins {
    id 'java'
    id 'groovy'
    id 'io.quarkus'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

group = 'com.algalopez.reackus'
version project_version


java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

wrapper {
    gradleVersion = '7.2'
}

repositories {
    mavenCentral()
    mavenLocal()
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
//    implementation group: 'io.quarkus', name: 'quarkus-flyway'
//    implementation group: 'io.quarkus', name: 'quarkus-jdbc-mariadb'
//    implementation group: 'io.quarkus', name: 'quarkus-rest-client-mutiny'
//    implementation group: 'io.quarkus', name: 'quarkus-resteasy-mutiny'
//    implementation group: 'io.quarkus', name: 'quarkus-smallrye-reactive-messaging-kafka'
//    implementation group: 'io.quarkus', name: 'quarkus-hibernate-reactive'
//    implementation group: 'io.quarkus', name: 'quarkus-hibernate-orm'
//    implementation group: 'io.quarkus', name: 'quarkus-minikube'
//    implementation group: 'io.quarkus', name: 'quarkus-hibernate-reactive-panache'
//    implementation group: 'io.quarkus', name: 'quarkus-container-image-docker'
//    implementation group: 'io.quarkus', name: 'quarkus-resteasy-jackson'
//    implementation group: 'io.quarkus', name: 'quarkus-kafka-client'
//    implementation group: 'io.quarkus', name: 'quarkus-avro'
//    implementation group: 'io.quarkus', name: 'quarkus-logging-json'
//    implementation group: 'io.quarkus', name: 'quarkus-smallrye-health'
//    implementation group: 'io.quarkus', name: 'quarkus-smallrye-metrics'
//    implementation group: 'io.quarkus', name: 'quarkus-micrometer'
//    implementation group: 'io.quarkus', name: 'quarkus-hibernate-validator'
//    implementation group: 'io.quarkus', name: 'quarkus-redis-client'
//    implementation group: 'io.quarkus', name: 'quarkus-arc'
    implementation group: 'io.quarkus', name: 'quarkus-mutiny'
    implementation group: 'io.quarkus', name: 'quarkus-resteasy-reactive'
    implementation group: 'io.quarkus', name: 'quarkus-resteasy-reactive-jackson'
    implementation group: 'io.quarkus', name: 'quarkus-smallrye-openapi'
    implementation group: 'io.quarkus', name: 'quarkus-hibernate-reactive-panache'
    implementation group: 'io.quarkus', name: 'quarkus-reactive-mysql-client'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: mapstructVersion
    implementation group: 'org.javatuples', name: 'javatuples', version: javatuplesVersion
    implementation group: 'org.aspectj', name: 'aspectjrt', version: aspectJVersion
    implementation group: 'org.aspectj', name: 'aspectjweaver', version: aspectJVersion

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapstructVersion

    testImplementation group: 'io.quarkus', name: 'quarkus-junit5'
    testImplementation group: 'io.quarkus', name: 'quarkus-junit5-mockito'
    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: restAssuredVersion
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-sql', version: groovyVersion
    testImplementation group: 'org.spockframework', name: 'spock-core', version: spockVersion
    testImplementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: mariaDbClientVersion

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: mapStructVersion
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

sonarqube {
    properties {
        property 'sonar.organization', 'algalopez'
        property 'sonar.projectName', 'reackus'
        property 'sonar.projectKey', 'algalopez_reackus'
        property 'sonar.projectVersion', version
        property 'sonar.language', 'java'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.exclusions', '**/*Constants.java'
        property 'sonar.coverage.exclusions', '**/*Constants.java'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
    }
    dependsOn test
}

task waitForDatabase() {
    doLast {
        commandLine 'bash', "database/wait-for-database.sh", "url=127.0.0.1", "port=13306", "user=user", "pass=pass"
    }
}

task buildFlywayImage(type: Exec) {
    group 'database'
    executable "docker"
    args('build', '--no-cache', '-f', "${projectDir}/database/Dockerfile.flyway", '-t', 'reackus-flyway', "${projectDir}//database")
}

task createDb(type: Exec) {
    group 'database'
    executable "docker"
    args('run', '--rm', '--name', 'reackus-flyway', '--net=host', 'reackus-flyway', 'clean', 'migrate')
}

task createDbPre(type: Exec) {
    group 'database'
    executable "docker"
    args('run', '--rm', '--name', 'reackus-flyway', '--net=host', 'reackus-flyway', '-configFiles=/flyway/conf/flyway-pre.conf', 'clean', 'migrate')
}


tasks.named("sonarqube") { it.dependsOn jacocoTestReport }
